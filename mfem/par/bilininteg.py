# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bilininteg', [dirname(__file__)])
        except ImportError:
            import _bilininteg
            return _bilininteg
        if fp is not None:
            try:
                _mod = imp.load_module('_bilininteg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _bilininteg = swig_import_helper()
    del swig_import_helper
else:
    import _bilininteg
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


import array
import coefficient
import matrix
import vector
import operators
import intrules
import sparsemat
import densemat
import eltrans
import fe
import gridfunc
import fespace
import mesh
import ncmesh
import element
import geom
import table
import vertex
import fe_coll
import lininteg
import linearform
class BilinearFormIntegrator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BilinearFormIntegrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BilinearFormIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.BilinearFormIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        return _bilininteg.BilinearFormIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)

    def AssembleFaceMatrix(self, *args):
        return _bilininteg.BilinearFormIntegrator_AssembleFaceMatrix(self, *args)

    def AssembleElementVector(self, el, Tr, elfun, elvect):
        return _bilininteg.BilinearFormIntegrator_AssembleElementVector(self, el, Tr, elfun, elvect)

    def AssembleElementGrad(self, el, Tr, elfun, elmat):
        return _bilininteg.BilinearFormIntegrator_AssembleElementGrad(self, el, Tr, elfun, elmat)

    def ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef=1):
        return _bilininteg.BilinearFormIntegrator_ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef)

    def ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy=None):
        return _bilininteg.BilinearFormIntegrator_ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy)

    def SetIntRule(self, ir):
        return _bilininteg.BilinearFormIntegrator_SetIntRule(self, ir)
    __swig_destroy__ = _bilininteg.delete_BilinearFormIntegrator
    __del__ = lambda self: None
BilinearFormIntegrator_swigregister = _bilininteg.BilinearFormIntegrator_swigregister
BilinearFormIntegrator_swigregister(BilinearFormIntegrator)

class TransposeIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransposeIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransposeIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, _bfi, _own_bfi=1):

        if _own_bfi == 1:  _bfi.thisown = 0


        this = _bilininteg.new_TransposeIntegrator(_bfi, _own_bfi)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.TransposeIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        return _bilininteg.TransposeIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)

    def AssembleFaceMatrix(self, *args):
        return _bilininteg.TransposeIntegrator_AssembleFaceMatrix(self, *args)
    __swig_destroy__ = _bilininteg.delete_TransposeIntegrator
    __del__ = lambda self: None
TransposeIntegrator_swigregister = _bilininteg.TransposeIntegrator_swigregister
TransposeIntegrator_swigregister(TransposeIntegrator)

class LumpedIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LumpedIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LumpedIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, _bfi, _own_bfi=1):
        this = _bilininteg.new_LumpedIntegrator(_bfi, _own_bfi)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.LumpedIntegrator_AssembleElementMatrix(self, el, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_LumpedIntegrator
    __del__ = lambda self: None
LumpedIntegrator_swigregister = _bilininteg.LumpedIntegrator_swigregister
LumpedIntegrator_swigregister(LumpedIntegrator)

class InverseIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, integ, own_integ=1):

        if own_integ == 1:  integ.thisown = 0


        this = _bilininteg.new_InverseIntegrator(integ, own_integ)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.InverseIntegrator_AssembleElementMatrix(self, el, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_InverseIntegrator
    __del__ = lambda self: None
InverseIntegrator_swigregister = _bilininteg.InverseIntegrator_swigregister
InverseIntegrator_swigregister(InverseIntegrator)

class SumIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SumIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SumIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, own_integs=1):
        this = _bilininteg.new_SumIntegrator(own_integs)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AddIntegrator(self, integ):

        integ.thisown = 0


        return _bilininteg.SumIntegrator_AddIntegrator(self, integ)


    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.SumIntegrator_AssembleElementMatrix(self, el, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_SumIntegrator
    __del__ = lambda self: None
SumIntegrator_swigregister = _bilininteg.SumIntegrator_swigregister
SumIntegrator_swigregister(SumIntegrator)

class DiffusionIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffusionIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiffusionIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_DiffusionIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.DiffusionIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        return _bilininteg.DiffusionIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)

    def AssembleElementVector(self, el, Tr, elfun, elvect):
        return _bilininteg.DiffusionIntegrator_AssembleElementVector(self, el, Tr, elfun, elvect)

    def ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef=1):
        return _bilininteg.DiffusionIntegrator_ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef)

    def ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy=None):
        return _bilininteg.DiffusionIntegrator_ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy)
    __swig_destroy__ = _bilininteg.delete_DiffusionIntegrator
    __del__ = lambda self: None
DiffusionIntegrator_swigregister = _bilininteg.DiffusionIntegrator_swigregister
DiffusionIntegrator_swigregister(DiffusionIntegrator)

class MassIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_MassIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.MassIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        return _bilininteg.MassIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_MassIntegrator
    __del__ = lambda self: None
MassIntegrator_swigregister = _bilininteg.MassIntegrator_swigregister
MassIntegrator_swigregister(MassIntegrator)

class BoundaryMassIntegrator(MassIntegrator):
    __swig_setmethods__ = {}
    for _s in [MassIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryMassIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MassIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryMassIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, q):
        this = _bilininteg.new_BoundaryMassIntegrator(q)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleFaceMatrix(self, *args):
        return _bilininteg.BoundaryMassIntegrator_AssembleFaceMatrix(self, *args)
    __swig_destroy__ = _bilininteg.delete_BoundaryMassIntegrator
    __del__ = lambda self: None
BoundaryMassIntegrator_swigregister = _bilininteg.BoundaryMassIntegrator_swigregister
BoundaryMassIntegrator_swigregister(BoundaryMassIntegrator)

class ConvectionIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvectionIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConvectionIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, q, a=1.0):
        this = _bilininteg.new_ConvectionIntegrator(q, a)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, arg2, arg3, arg4):
        return _bilininteg.ConvectionIntegrator_AssembleElementMatrix(self, arg2, arg3, arg4)
    __swig_destroy__ = _bilininteg.delete_ConvectionIntegrator
    __del__ = lambda self: None
ConvectionIntegrator_swigregister = _bilininteg.ConvectionIntegrator_swigregister
ConvectionIntegrator_swigregister(ConvectionIntegrator)

class GroupConvectionIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroupConvectionIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroupConvectionIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, q, a=1.0):
        this = _bilininteg.new_GroupConvectionIntegrator(q, a)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, arg2, arg3, arg4):
        return _bilininteg.GroupConvectionIntegrator_AssembleElementMatrix(self, arg2, arg3, arg4)
    __swig_destroy__ = _bilininteg.delete_GroupConvectionIntegrator
    __del__ = lambda self: None
GroupConvectionIntegrator_swigregister = _bilininteg.GroupConvectionIntegrator_swigregister
GroupConvectionIntegrator_swigregister(GroupConvectionIntegrator)

class VectorMassIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorMassIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorMassIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_VectorMassIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.VectorMassIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        return _bilininteg.VectorMassIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_VectorMassIntegrator
    __del__ = lambda self: None
VectorMassIntegrator_swigregister = _bilininteg.VectorMassIntegrator_swigregister
VectorMassIntegrator_swigregister(VectorMassIntegrator)

class VectorFEDivergenceIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFEDivergenceIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFEDivergenceIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_VectorFEDivergenceIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.VectorFEDivergenceIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        return _bilininteg.VectorFEDivergenceIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_VectorFEDivergenceIntegrator
    __del__ = lambda self: None
VectorFEDivergenceIntegrator_swigregister = _bilininteg.VectorFEDivergenceIntegrator_swigregister
VectorFEDivergenceIntegrator_swigregister(VectorFEDivergenceIntegrator)

class VectorFECurlIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFECurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFECurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_VectorFECurlIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.VectorFECurlIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        return _bilininteg.VectorFECurlIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_VectorFECurlIntegrator
    __del__ = lambda self: None
VectorFECurlIntegrator_swigregister = _bilininteg.VectorFECurlIntegrator_swigregister
VectorFECurlIntegrator_swigregister(VectorFECurlIntegrator)

class DerivativeIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, q, i):
        this = _bilininteg.new_DerivativeIntegrator(q, i)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.DerivativeIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        return _bilininteg.DerivativeIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_DerivativeIntegrator
    __del__ = lambda self: None
DerivativeIntegrator_swigregister = _bilininteg.DerivativeIntegrator_swigregister
DerivativeIntegrator_swigregister(DerivativeIntegrator)

class CurlCurlIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurlCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurlCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_CurlCurlIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

        self._coeff = args[0]




    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.CurlCurlIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    def ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef):
        return _bilininteg.CurlCurlIntegrator_ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef)

    def ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy=None):
        return _bilininteg.CurlCurlIntegrator_ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy)
    __swig_destroy__ = _bilininteg.delete_CurlCurlIntegrator
    __del__ = lambda self: None
CurlCurlIntegrator_swigregister = _bilininteg.CurlCurlIntegrator_swigregister
CurlCurlIntegrator_swigregister(CurlCurlIntegrator)

class VectorCurlCurlIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorCurlCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorCurlCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_VectorCurlCurlIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.VectorCurlCurlIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    def GetElementEnergy(self, el, Tr, elfun):
        return _bilininteg.VectorCurlCurlIntegrator_GetElementEnergy(self, el, Tr, elfun)
    __swig_destroy__ = _bilininteg.delete_VectorCurlCurlIntegrator
    __del__ = lambda self: None
VectorCurlCurlIntegrator_swigregister = _bilininteg.VectorCurlCurlIntegrator_swigregister
VectorCurlCurlIntegrator_swigregister(VectorCurlCurlIntegrator)

class VectorFEMassIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFEMassIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFEMassIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_VectorFEMassIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

        self._coeff = args[0]




    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.VectorFEMassIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        return _bilininteg.VectorFEMassIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_VectorFEMassIntegrator
    __del__ = lambda self: None
VectorFEMassIntegrator_swigregister = _bilininteg.VectorFEMassIntegrator_swigregister
VectorFEMassIntegrator_swigregister(VectorFEMassIntegrator)

class GradientVectorFEIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GradientVectorFEIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GradientVectorFEIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_GradientVectorFEIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix2(self, trial_el, test_el, Trans, elmat):
        return _bilininteg.GradientVectorFEIntegrator_AssembleElementMatrix2(self, trial_el, test_el, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_GradientVectorFEIntegrator
    __del__ = lambda self: None
GradientVectorFEIntegrator_swigregister = _bilininteg.GradientVectorFEIntegrator_swigregister
GradientVectorFEIntegrator_swigregister(GradientVectorFEIntegrator)

class VectorDivergenceIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDivergenceIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDivergenceIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_VectorDivergenceIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        return _bilininteg.VectorDivergenceIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_VectorDivergenceIntegrator
    __del__ = lambda self: None
VectorDivergenceIntegrator_swigregister = _bilininteg.VectorDivergenceIntegrator_swigregister
VectorDivergenceIntegrator_swigregister(VectorDivergenceIntegrator)

class DivDivIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivDivIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DivDivIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_DivDivIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.DivDivIntegrator_AssembleElementMatrix(self, el, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_DivDivIntegrator
    __del__ = lambda self: None
DivDivIntegrator_swigregister = _bilininteg.DivDivIntegrator_swigregister
DivDivIntegrator_swigregister(DivDivIntegrator)

class VectorDiffusionIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDiffusionIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDiffusionIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_VectorDiffusionIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        return _bilininteg.VectorDiffusionIntegrator_AssembleElementMatrix(self, el, Trans, elmat)
    __swig_destroy__ = _bilininteg.delete_VectorDiffusionIntegrator
    __del__ = lambda self: None
VectorDiffusionIntegrator_swigregister = _bilininteg.VectorDiffusionIntegrator_swigregister
VectorDiffusionIntegrator_swigregister(VectorDiffusionIntegrator)

class ElasticityIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElasticityIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElasticityIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_ElasticityIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleElementMatrix(self, arg2, arg3, arg4):
        return _bilininteg.ElasticityIntegrator_AssembleElementMatrix(self, arg2, arg3, arg4)
    __swig_destroy__ = _bilininteg.delete_ElasticityIntegrator
    __del__ = lambda self: None
ElasticityIntegrator_swigregister = _bilininteg.ElasticityIntegrator_swigregister
ElasticityIntegrator_swigregister(ElasticityIntegrator)

class DGTraceIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGTraceIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGTraceIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_DGTraceIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleFaceMatrix(self, *args):
        return _bilininteg.DGTraceIntegrator_AssembleFaceMatrix(self, *args)
    __swig_destroy__ = _bilininteg.delete_DGTraceIntegrator
    __del__ = lambda self: None
DGTraceIntegrator_swigregister = _bilininteg.DGTraceIntegrator_swigregister
DGTraceIntegrator_swigregister(DGTraceIntegrator)

class DGDiffusionIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGDiffusionIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGDiffusionIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bilininteg.new_DGDiffusionIntegrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleFaceMatrix(self, *args):
        return _bilininteg.DGDiffusionIntegrator_AssembleFaceMatrix(self, *args)
    __swig_destroy__ = _bilininteg.delete_DGDiffusionIntegrator
    __del__ = lambda self: None
DGDiffusionIntegrator_swigregister = _bilininteg.DGDiffusionIntegrator_swigregister
DGDiffusionIntegrator_swigregister(DGDiffusionIntegrator)

class TraceJumpIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraceJumpIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraceJumpIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bilininteg.new_TraceJumpIntegrator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleFaceMatrix(self, *args):
        return _bilininteg.TraceJumpIntegrator_AssembleFaceMatrix(self, *args)
    __swig_destroy__ = _bilininteg.delete_TraceJumpIntegrator
    __del__ = lambda self: None
TraceJumpIntegrator_swigregister = _bilininteg.TraceJumpIntegrator_swigregister
TraceJumpIntegrator_swigregister(TraceJumpIntegrator)

class NormalTraceJumpIntegrator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalTraceJumpIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalTraceJumpIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bilininteg.new_NormalTraceJumpIntegrator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def AssembleFaceMatrix(self, *args):
        return _bilininteg.NormalTraceJumpIntegrator_AssembleFaceMatrix(self, *args)
    __swig_destroy__ = _bilininteg.delete_NormalTraceJumpIntegrator
    __del__ = lambda self: None
NormalTraceJumpIntegrator_swigregister = _bilininteg.NormalTraceJumpIntegrator_swigregister
NormalTraceJumpIntegrator_swigregister(NormalTraceJumpIntegrator)

class DiscreteInterpolator(BilinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscreteInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscreteInterpolator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bilininteg.new_DiscreteInterpolator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_DiscreteInterpolator
    __del__ = lambda self: None
DiscreteInterpolator_swigregister = _bilininteg.DiscreteInterpolator_swigregister
DiscreteInterpolator_swigregister(DiscreteInterpolator)

class GradientInterpolator(DiscreteInterpolator):
    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GradientInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GradientInterpolator, name)
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, h1_fe, nd_fe, Trans, elmat):
        return _bilininteg.GradientInterpolator_AssembleElementMatrix2(self, h1_fe, nd_fe, Trans, elmat)

    def __init__(self):
        this = _bilininteg.new_GradientInterpolator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_GradientInterpolator
    __del__ = lambda self: None
GradientInterpolator_swigregister = _bilininteg.GradientInterpolator_swigregister
GradientInterpolator_swigregister(GradientInterpolator)

class IdentityInterpolator(DiscreteInterpolator):
    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentityInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdentityInterpolator, name)
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat):
        return _bilininteg.IdentityInterpolator_AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat)

    def __init__(self):
        this = _bilininteg.new_IdentityInterpolator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_IdentityInterpolator
    __del__ = lambda self: None
IdentityInterpolator_swigregister = _bilininteg.IdentityInterpolator_swigregister
IdentityInterpolator_swigregister(IdentityInterpolator)

class CurlInterpolator(DiscreteInterpolator):
    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurlInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurlInterpolator, name)
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat):
        return _bilininteg.CurlInterpolator_AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat)

    def __init__(self):
        this = _bilininteg.new_CurlInterpolator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_CurlInterpolator
    __del__ = lambda self: None
CurlInterpolator_swigregister = _bilininteg.CurlInterpolator_swigregister
CurlInterpolator_swigregister(CurlInterpolator)

class DivergenceInterpolator(DiscreteInterpolator):
    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivergenceInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DivergenceInterpolator, name)
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat):
        return _bilininteg.DivergenceInterpolator_AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat)

    def __init__(self):
        this = _bilininteg.new_DivergenceInterpolator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_DivergenceInterpolator
    __del__ = lambda self: None
DivergenceInterpolator_swigregister = _bilininteg.DivergenceInterpolator_swigregister
DivergenceInterpolator_swigregister(DivergenceInterpolator)

class NormalInterpolator(DiscreteInterpolator):
    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalInterpolator, name)
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat):
        return _bilininteg.NormalInterpolator_AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat)

    def __init__(self):
        this = _bilininteg.new_NormalInterpolator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_NormalInterpolator
    __del__ = lambda self: None
NormalInterpolator_swigregister = _bilininteg.NormalInterpolator_swigregister
NormalInterpolator_swigregister(NormalInterpolator)

# This file is compatible with both classic and new-style classes.


